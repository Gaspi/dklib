#NAME dk_int
N : Type := cc.eT dk_nat.Nat.
O : N := dk_nat.O.
S : N -> N := dk_nat.S.

B : Type := cc.eT dk_bool.bool.

(; integers are defined by couples of naturals seen as their difference modulo the rule
   S n - S m --> n - m
 ;)
int : cc.uT.
I : Type := cc.eT int.
(; the only constructor of Int, make n m builds the integer n - m ;)
make : N -> N -> I.
(;
thanks to this rule, intergers reduce to one of the three following normal form :
 make O O which is 0
or
 make (S n) O which is n+1
or
 make O (S n) which is -n-1
;)
[n : N, m : N] make (dk_nat.S n) (dk_nat.S m) --> make n m.

nat_abs : I -> N.
[n : N] nat_abs (make n dk_nat.O) --> n
[m : N] nat_abs (make dk_nat.O m) --> m.

(; n - m <= p - q iff n + q <= m + p ;)
leq : I -> I -> B.
[n : N, m : N, p : N, q : N]
    leq (make n m) (make p q)
      --> dk_nat.leq (dk_nat.plus n q) (dk_nat.plus m p).

(; n - m < p - q iff n + q < m + p ;)
lt : I -> I -> B.
[n : N, m : N, p : N, q : N]
    lt (make n m) (make p q)
      --> dk_nat.lt (dk_nat.plus n q) (dk_nat.plus m p).

geq : I -> I -> B.
[ i : I, j : I ] geq i j --> leq j i.

gt : I -> I -> B.
[ i : I, j : I ] gt i j --> lt j i.

eq : I -> I -> B.
[ i : I, j : I ] eq i j --> dk_bool.and (leq i j) (geq i j).

(; (n - m) + (p - q) = (n + p) - (m + q) ;)
plus : I -> I -> I.
[n : N,
 m : N,
 p : N,
 q : N]
    plus (make n m) (make p q)
      --> make (dk_nat.plus n p) (dk_nat.plus m q).

opp : I -> I.
[n : N, m : N]
    opp (make n m) --> make m n.

sub : I -> I -> I.
[i : I, j : I]
    sub i j --> plus i (opp j).

mult : I -> I -> I.
[n : N, m : N, p : N, q : N]
    mult (make n m) (make p q)
      --> make
         (dk_nat.plus (dk_nat.mult n p) (dk_nat.mult m q))
         (dk_nat.plus (dk_nat.mult n q) (dk_nat.mult m p)).

max : I -> I -> I.
[ m : I, n : I ]
    max m n --> dk_bool.ite int (leq m n) n m.

min : I -> I -> I.
[ m : I, n : I ]
    min m n --> dk_bool.ite int (leq m n) m n.

abs : I -> I.
[ i : I ] abs i --> make (nat_abs i) O.

mod : I -> I -> I.
[n : N, m : N, p : N]
    mod (make m n) (make p dk_nat.O)
      --> make (dk_nat.mod m p) (dk_nat.mod n p)
[n : N, m : N, p : N]
    mod (make m n) (make dk_nat.O p)
      --> make (dk_nat.mod m p) (dk_nat.mod n p).

quo : I -> I -> I.
[m : N, p : N]
    quo (make m dk_nat.O) (make p dk_nat.O)
      --> make (dk_nat.quo m p) O
[m : N, p : N]
    quo (make dk_nat.O m) (make dk_nat.O p)
      --> make (dk_nat.quo m p) O
[m : N, p : N]
    quo (make dk_nat.O m) (make p dk_nat.O)
      --> make O (dk_nat.quo m p)
[m : N, p : N]
    quo (make m dk_nat.O) (make dk_nat.O p)
      --> make O (dk_nat.quo m p).
