#NAME dk_obj_examples

Label := dk_obj.Label.
type := dk_obj.ObjType.
type_cons := dk_obj.Ot_cons.
type_nil := dk_obj.Ot_nil.
Expr := dk_obj.Expr.

(; Booleans ;)

l_if : Label
:=
  dk_string.cons dk_char.i (
  dk_string.cons dk_char.f (
  dk_string.nil)).

l_then : Label
:=
  dk_string.cons dk_char.t (
  dk_string.cons dk_char.h (
  dk_string.cons dk_char.e (
  dk_string.cons dk_char.n (
  dk_string.nil)))).

l_else : Label
:=
  dk_string.cons dk_char.e (
  dk_string.cons dk_char.l (
  dk_string.cons dk_char.s (
  dk_string.cons dk_char.e (
  dk_string.nil)))).

boolT : A : type -> type
      :=
        A : type =>
        type_cons
          l_if
          A
          (type_cons
            l_then
            A
            (type_cons
              l_else
              A
              type_nil)).

BoolT : A : type -> Type
      := A : type => Expr (boolT A).

trueT : A : type -> BoolT A
      := A : type =>
         dk_obj.update
           (boolT A)
           (dk_obj.init (boolT A))
           l_if
             (self : BoolT A =>
              dk_obj.select
                (boolT A)
                self l_then).

falseT : A : type -> BoolT A
      := A : type =>
         dk_obj.update
           (boolT A)
           (dk_obj.init (boolT A))
           l_if
             (self : BoolT A =>
              dk_obj.select
                (boolT A)
                self l_else).

ifT : A : type ->
      BoolT A ->
      Expr A ->
      Expr A ->
      Expr A
    :=
      A : type =>
      b : BoolT A =>
      then : Expr A =>
      else : Expr A =>
      dk_obj.select
        (boolT A)
        (dk_obj.update
          (boolT A)
          (dk_obj.update
            (boolT A)
            b
              l_then
              (self : BoolT A => then))
          l_else
            (self : BoolT A => else))
        l_if.

test1 :=
  A : type =>
  t : Expr A =>
  e : Expr A =>
  ifT A (trueT A) t e.

test2 :=
  A : type =>
  t : Expr A =>
  e : Expr A =>
  ifT A (falseT A) t e.

(; Lambda-calculus ;)

l_arg : Label
:=
  dk_string.cons dk_char.a (
  dk_string.cons dk_char.r (
  dk_string.cons dk_char.g (
  dk_string.nil))).

l_val : Label
:=
  dk_string.cons dk_char.v (
  dk_string.cons dk_char.a (
  dk_string.cons dk_char.l (
  dk_string.nil))).

arrow : type -> type -> type
      := 
        A : type =>
        B : type =>
        type_cons
          l_arg
          A
          (type_cons
            l_val
            B
            type_nil).

Arrow : type -> type -> Type
      :=
        A : type =>
        B : type =>
        Expr (arrow A B).

Lambda : A : type ->
         B : type ->
         (Expr A -> Expr B) ->
         Arrow A B
       :=
         A : type =>
         B : type =>
         f : (Expr A -> Expr B) =>
         dk_obj.update
           (arrow A B)
           (dk_obj.init (arrow A B))
           l_val
             (self : Arrow A B =>
              f (dk_obj.select
                  (arrow A B)
                  self
                    l_arg)).

App : A : type ->
      B : type ->
      Arrow A B ->
      Expr A ->
      Expr B
    :=
      A : type =>
      B : type =>
      f : Arrow A B =>
      a : Expr A =>
      dk_obj.select
        (arrow A B)
        (dk_obj.update
          (arrow A B)
          f
            l_arg
            (self : Arrow A B => a))
        l_val.


(; Subtyping example ;)

l_get := dk_string.cons dk_char.g (
         dk_string.cons dk_char.e (
         dk_string.cons dk_char.t (
         dk_string.nil))).

l_set := dk_string.cons dk_char.s (
         dk_string.cons dk_char.e (
         dk_string.cons dk_char.t (
         dk_string.nil))).

l_contents := dk_string.cons dk_char.c (
              dk_string.cons dk_char.o (
              dk_string.cons dk_char.n (
              dk_string.cons dk_char.t (
              dk_string.cons dk_char.e (
              dk_string.cons dk_char.n (
              dk_string.cons dk_char.t (
              dk_string.cons dk_char.s (
              dk_string.nil)))))))).

nat : type.
Nat := Expr nat.
42 : Nat.
24 : Nat.

romCell : type
        :=
          type_cons l_get nat type_nil.
RomCell := Expr romCell.

promCell : type
         :=
           type_cons l_get nat (
           type_cons l_set (arrow nat romCell)
           type_nil).
PromCell := Expr promCell.

privateCell : type
            :=
              type_cons l_get nat (
              type_cons l_set (arrow nat romCell) (
              type_cons l_contents nat
              type_nil)).
PrivateCell := Expr privateCell.

Private_to_Prom : PrivateCell -> PromCell
                :=
                  dk_obj.coerce privateCell promCell dk_logic.I.

Prom_to_Rom : PromCell -> RomCell
            :=
              dk_obj.coerce promCell romCell dk_logic.I.

Private_to_Rom : PrivateCell -> RomCell
               :=
                 dk_obj.coerce privateCell romCell dk_logic.I.

myRom : RomCell
      :=
        (dk_obj.update
          romCell
          (dk_obj.init romCell)
          l_get
            (self : RomCell => 42)).

test3 := dk_obj.select romCell myRom l_get.

myProm : PromCell
       :=
         dk_obj.update
           promCell
           (dk_obj.update
             promCell
             (dk_obj.init promCell)
             l_get
               (self : PromCell => 42))
           l_set
             (self : PromCell =>
              Lambda nat romCell
                     (x : Nat =>
                      Prom_to_Rom
                        (dk_obj.update
                          promCell
                          self
                          l_get
                          (s : PromCell => x)))).

test4 := dk_obj.select promCell myProm l_get.
test5 := dk_obj.select
          romCell
          (App nat romCell (dk_obj.select promCell myProm l_set) 24)
          l_get.


myCell : PromCell
       :=
         Private_to_Prom
           (dk_obj.update
             privateCell
             (dk_obj.update
               privateCell
               (dk_obj.update
                 privateCell
                 (dk_obj.init privateCell)
                 l_get
                   (self : PrivateCell =>
                    dk_obj.select privateCell self l_contents))
               l_set
                 (self : PrivateCell =>
                  Lambda
                    nat
                    romCell
                    (x : Nat =>
                     Private_to_Rom
                       (dk_obj.update
                         privateCell
                         self
                         l_contents
                         (s : PrivateCell => x)))))
             l_contents
               (self : PrivateCell => 42)).

test6 := dk_obj.select
          romCell
          (App nat romCell
               (dk_obj.select
                 promCell
                 myCell
                 l_set)
               24)
          l_get.
