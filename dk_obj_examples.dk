#NAME dk_obj_examples

Label := dk_obj.Label.
type := dk_obj.ObjType.
type_cons := dk_obj.Ot_cons.
type_nil := dk_obj.Ot_nil.
Expr := dk_obj.Expr.

(; Booleans ;)

l_if : Label
:=
  dk_string.cons dk_char.i (
  dk_string.cons dk_char.f (
  dk_string.nil)).

l_then : Label
:=
  dk_string.cons dk_char.t (
  dk_string.cons dk_char.h (
  dk_string.cons dk_char.e (
  dk_string.cons dk_char.n (
  dk_string.nil)))).

l_else : Label
:=
  dk_string.cons dk_char.e (
  dk_string.cons dk_char.l (
  dk_string.cons dk_char.s (
  dk_string.cons dk_char.e (
  dk_string.nil)))).

boolT : A : type -> type
      :=
        A : type =>
        type_cons
          l_if
          A
          (type_cons
            l_then
            A
            (type_cons
              l_else
              A
              type_nil)).

BoolT : A : type -> Type
      := A : type => Expr (boolT A).

trueT : A : type -> BoolT A
      := A : type =>
         dk_obj.update
           (boolT A)
           (dk_obj.init (boolT A))
           l_if
             (self : BoolT A =>
              dk_obj.select
                (boolT A)
                self l_then).

falseT : A : type -> BoolT A
      := A : type =>
         dk_obj.update
           (boolT A)
           (dk_obj.init (boolT A))
           l_if
             (self : BoolT A =>
              dk_obj.select
                (boolT A)
                self l_else).

ifT : A : type ->
      BoolT A ->
      Expr A ->
      Expr A ->
      Expr A
    :=
      A : type =>
      b : BoolT A =>
      then : Expr A =>
      else : Expr A =>
      dk_obj.select
        (boolT A)
        (dk_obj.update
          (boolT A)
          (dk_obj.update
            (boolT A)
            b
              l_then
              (self : BoolT A => then))
          l_else
            (self : BoolT A => else))
        l_if.

test1 :=
  A : type =>
  t : Expr A =>
  e : Expr A =>
  ifT A (trueT A) t e.

test2 :=
  A : type =>
  t : Expr A =>
  e : Expr A =>
  ifT A (falseT A) t e.

(; Lambda-calculus ;)

l_arg : Label
:=
  dk_string.cons dk_char.a (
  dk_string.cons dk_char.r (
  dk_string.cons dk_char.g (
  dk_string.nil))).

l_val : Label
:=
  dk_string.cons dk_char.v (
  dk_string.cons dk_char.a (
  dk_string.cons dk_char.l (
  dk_string.nil))).

arrow : type -> type -> type
      := 
        A : type =>
        B : type =>
        type_cons
          l_arg
          A
          (type_cons
            l_val
            B
            type_nil).

Arrow : type -> type -> Type
      :=
        A : type =>
        B : type =>
        Expr (arrow A B).

Lambda : A : type ->
         B : type ->
         (Expr A -> Expr B) ->
         Arrow A B
       :=
         A : type =>
         B : type =>
         f : (Expr A -> Expr B) =>
         dk_obj.update
           (arrow A B)
           (dk_obj.init (arrow A B))
           l_val
             (self : Arrow A B =>
              f (dk_obj.select
                  (arrow A B)
                  self
                    l_arg)).

App : A : type ->
      B : type ->
      Arrow A B ->
      Expr A ->
      Expr B
    :=
      A : type =>
      B : type =>
      f : Arrow A B =>
      a : Expr A =>
      dk_obj.select
        (arrow A B)
        (dk_obj.update
          (arrow A B)
          f
            l_arg
            a)
        l_val.


(; Subtyping example ;)

l_get := dk_string.cons dk_char.g (
         dk_string.cons dk_char.e (
         dk_string.cons dk_char.t (
         dk_string.nil))).

l_set := dk_string.cons dk_char.s (
         dk_string.cons dk_char.e (
         dk_string.cons dk_char.t (
         dk_string.nil))).

l_contents := dk_string.cons dk_char.c (
              dk_string.cons dk_char.o (
              dk_string.cons dk_char.n (
              dk_string.cons dk_char.t (
              dk_string.cons dk_char.e (
              dk_string.cons dk_char.n (
              dk_string.cons dk_char.t (
              dk_string.cons dk_char.s (
              dk_string.nil)))))))).

Nat : type.
Arrow : type -> type -> type.

42 : Expr Nat.
24 : Expr Nat.
[ A : type, B : type ]
    dk_obj.expr (Arrow A B)
      -->
    cc.Arrow (dk_obj.expr A) (dk_obj.expr B).


romCell : ObjType := Ot_cons l_get Nat Ot_nil.

promCell : ObjType
         :=
           Ot_cons l_get Nat (
           Ot_cons l_set (Arrow Nat romCell)
           Ot_nil).

privateCell : ObjType
            :=
              Ot_cons l_get Nat (
              Ot_cons l_set (Arrow Nat romCell) (
              Ot_cons l_contents Nat
              Ot_nil)).

Private_to_Prom : Expr privateCell -> Expr promCell
                := cell : Expr privateCell =>
                   make promCell
                     (Ot_eq_po
                       promCell
                       privateCell
                       promCell
                       (Ot_domain promCell)
                       (l : Label =>
                        assoc_subtype privateCell promCell l tt)
                       (ocast privateCell promCell cell)).

Prom_to_Rom : Expr promCell -> Expr romCell
                := cell : Expr promCell =>
                   make romCell
                     (Ot_eq_po
                       romCell
                       promCell
                       romCell
                       (Ot_domain romCell)
                       (l : Label =>
                        assoc_subtype promCell romCell l tt)
                       (ocast promCell romCell cell)).



myRom : Expr romCell
      :=
        (make romCell
           (Po_cons
             romCell
             (Ot_rassoc romCell)
             domain_nil
               l_get
               (self : Expr romCell => 42)
               (Po_nil romCell (Ot_rassoc romCell)))).

(; select romCell myRom l_get ;)

myProm : Expr promCell
      :=
        (make promCell
           (Po_cons
             promCell
             (Ot_rassoc promCell)
             (domain_cons l_set domain_nil)
               l_get
                 (self : Expr promCell => 42)
                 (Po_cons
                   promCell
                   (Ot_rassoc promCell)
                   domain_nil
                     l_set
                     (self : Expr promCell =>
                      x : Expr Nat =>
                      Prom_to_Rom
                        (update
                          promCell
                          self
                          l_get
                          (s : Expr promCell => x)))
                     (Po_nil promCell (Ot_rassoc promCell))))).

(; select promCell myProm l_get ;)
(; select romCell (select promCell myProm l_set 24) l_get ;)


myCell : Expr promCell
       :=
         Private_to_Prom
           (make privateCell
              (Po_cons
                privateCell
                (Ot_rassoc privateCell)
                (domain_cons l_set (domain_cons l_contents domain_nil))
                l_get
                  (self : Expr privateCell => select privateCell self l_contents)
                  (Po_cons
                    privateCell
                    (Ot_rassoc privateCell)
                    (domain_cons l_contents domain_nil)
                    l_set
                      (self : Expr privateCell =>
                       x : Expr Nat =>
                       (Prom_to_Rom
                         (Private_to_Prom
                           (update
                             privateCell
                             self
                             l_contents
                             (s : Expr privateCell =>
                              x)))))
                      (Po_cons
                        privateCell
                        (Ot_rassoc privateCell)
                        domain_nil
                          l_contents
                          (self : Expr privateCell => 42)
                          (Po_nil privateCell (Ot_rassoc privateCell)))))).

(; select romCell (select promCell myCell l_set 24) l_get ;)
